{"version":3,"sources":["components/img/p1.jpg","components/App.js","serviceWorker.js","components/Grid1.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","p1","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","ReactDOM","render","src_components_App","classes","Grid","container","item","xs","Paper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8LCyBzBC,EAnBH,WACR,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,OAEVL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,OAEVL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,SCJFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFCbAC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,cCL9BC,IAASC,OAAOzB,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAACwB,EAAD,MAEA1B,EAAAC,EAAAC,cDMW,WACb,IAAMyB,EAAUhB,IAEhB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAQb,MACtBd,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMC,WAAS,EAACX,QAAS,GACvBlB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO7B,UAAWwB,EAAQX,OAA1B,UAEFhB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO7B,UAAWwB,EAAQX,OAA1B,SAEFhB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO7B,UAAWwB,EAAQX,OAA1B,SAAuChB,EAAAC,EAAAC,cAAA,OAAKE,IAAI,mBAElDJ,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO7B,UAAWwB,EAAQX,OAA1B,SAEFhB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO7B,UAAWwB,EAAQX,OAA1B,SAEFhB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO7B,UAAWwB,EAAQX,OAA1B,SAEFhB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO7B,UAAWwB,EAAQX,OAA1B,YC/BN,OACQiB,SAASC,eAAe,SFsH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.04e15dee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/p1.c8971ba6.jpg\";","import React from 'react'\r\nimport Card from './Card'\r\nimport './App.css'\r\nimport p1 from './img/p1.jpg'\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"col-main tc \">\r\n            <div className=\"col-1 \">\r\n            <img src={p1} />\r\n            </div>\r\n            <div className=\"col-2 \">\r\n            <img src={p1} />\r\n            </div>\r\n            <div className=\"col-3 \">\r\n            <img src={p1} />\r\n            </div>\r\n         \r\n\r\n\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function Grid1() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>xs=12</Paper>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Paper className={classes.paper}>xs=6</Paper>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Paper className={classes.paper}>xs=6  <img src=\"image/p1.jpg\" /></Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>xs=3</Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>xs=3</Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>xs=3</Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>xs=3</Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport Grid1 from './components/Grid1'\n\n\nReactDOM.render(<div>\n    <App />\n   \n    <Grid1 />\n    </div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}