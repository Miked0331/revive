{"version":3,"sources":["components/img/p1.jpg","components/Info.js","components/Card.js","components/CardList.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Info","id","img","react_default","a","createElement","src","p1","desc","price","Card","props","className","CardList","_ref","cardComponent","map","user","i","components_Card","App","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLCI3BC,EAAO,CAChB,CACAC,GAAI,EACJC,IAAIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,MACdC,KAAM,WACNC,MAAO,QAEX,CACIR,GAAI,EACJC,IAAKC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,MACfC,KAAM,YACNC,MAAO,QAEX,CACIR,GAAI,EACJC,IAAKC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,MACfC,KAAM,cACNC,MAAO,SCFIC,EAfF,SAACC,GACV,OAEIR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,SACVT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,IAChBT,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,MACVJ,EAAAC,EAAAC,cAAA,SAAIM,EAAMH,MACVL,EAAAC,EAAAC,cAAA,SAAIM,EAAMF,UCGPI,EAXE,SAAAC,GAAY,IAAVd,EAAUc,EAAVd,KACTe,EAAgBf,EAAKgB,IAAI,SAACC,EAAMC,GAClC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,CAAMjB,IAAKF,EAAKkB,GAAGhB,IAAKM,KAAMR,EAAKkB,GAAGV,KAAMC,MAAOT,EAAKkB,GAAGT,UAEtE,OACIN,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACVG,ICMEK,EATH,WACR,OACIjB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,IACZT,EAAAC,EAAAC,cAACgB,EAAD,CAAWrB,KAAMA,MCGRsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAACwB,EAAD,OAEQC,SAASC,eAAe,SDwH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de253c58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/p1.c8971ba6.jpg\";","import React from 'react'\r\nimport p1 from './img/p1.jpg'\r\n \r\n\r\nexport const Info = [\r\n    {\r\n    id: 1,\r\n    img:<img src={p1} />,\r\n    desc: 'it is me',\r\n    price: '2.50'\r\n},\r\n{\r\n    id: 2,\r\n    img: <img src={p1} />,\r\n    desc: 'it is mee',\r\n    price: '2.50'\r\n},\r\n{\r\n    id: 3,\r\n    img: <img src={p1} />,\r\n    desc: 'it is meeee',\r\n    price: '2.50'\r\n},\r\n]","import React from 'react'\r\nimport './App.css'\r\nimport p1 from './img/p1.jpg'\r\n\r\nconst Card = (props) => {\r\n    return(\r\n       \r\n        <div className=\"col-1\">\r\n             <div className=\"\">\r\n            <img src={p1} />\r\n            <p>{props.desc}</p>\r\n            <p>{props.price}</p>\r\n            </div>\r\n            \r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({Info}) => {\r\n    const cardComponent = Info.map((user, i) =>{\r\n        return <Card img={Info[i].img} desc={Info[i].desc} price={Info[i].price} />\r\n    })\r\n    return (\r\n        <div className=\"col-main\">\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {Info} from './Info'\r\nimport CardList from './CardList'\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"\">\r\n           <CardList  Info={Info}/>\r\n            \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<div>\r\n    <App />\r\n   \r\n    </div>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}